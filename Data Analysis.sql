--
--DATA CLEANING
--


UPDATE DATA_WAREHOUSE.STAGING_ONLINESHOPPING AS SR
SET SR.PURCHASE_RATE = REPLACE(SR.PURCHASE_RATE, ',', '.');

ALTER TABLE DATA_WAREHOUSE.STAGING_ONLINESHOPPING MODIFY (PURCHASE_RATE DECIMAL(10, 2));



UPDATE DATA_WAREHOUSE.STAGING_BUSINESS_INDICATORS AS SR
SET SR.REVENUE_SHARE_ECOMMERCE = REPLACE(SR.REVENUE_SHARE_ECOMMERCE, ',', '.');

ALTER TABLE DATA_WAREHOUSE.STAGING_BUSINESS_INDICATORS MODIFY (REVENUE_SHARE_ECOMMERCE DECIMAL(10, 2));



ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_AMAZON_GERMANY MODIFY (REVENUE_IN_BILLION_USD DECIMAL(10, 2));

UPDATE DATA_WAREHOUSE.STAGING_REVENUE_AMAZON_GERMANY 
SET REVENUE_IN_BILLION_USD = REVENUE_IN_BILLION_USD * 1000 * 0.92;

ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_AMAZON_GERMANY RENAME COLUMN REVENUE_IN_BILLION_USD TO REVENUE_IN_MILLION_EUR;



ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_EDEKA MODIFY (REVENUE_IN_MILLION_EUR DECIMAL(10, 2));

UPDATE DATA_WAREHOUSE.STAGING_REVENUE_EDEKA 
SET REVENUE_IN_BILLION_EUR = REVENUE_IN_BILLION_EUR * 1000;

ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_EDEKA  RENAME COLUMN REVENUE_IN_BILLION_EUR TO REVENUE_IN_MILLION_EUR;



ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_CA MODIFY (REVENUE_IN_MILLION_EUR DECIMAL(10, 2));



ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT MODIFY (REVENUE_GALERIAKAUFHOF_IN_BILLION_EUR DECIMAL(10, 2));
ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT MODIFY (REVENUE_KARSTADT_IN_BILLION_EUR DECIMAL(10, 2));

UPDATE DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT  
SET REVENUE_GALERIAKAUFHOF_IN_BILLION_EUR = REVENUE_GALERIAKAUFHOF_IN_BILLION_EUR * 1000;
UPDATE DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT  
SET REVENUE_KARSTADT_IN_BILLION_EUR = REVENUE_KARSTADT_IN_BILLION_EUR * 1000;

ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT RENAME COLUMN REVENUE_GALERIAKAUFHOF_IN_BILLION_EUR TO REVENUE_GALERIAKAUFHOF_IN_MILLION_EUR;
ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT RENAME COLUMN REVENUE_KARSTADT_IN_BILLION_EUR TO REVENUE_KARSTADT_IN_MILLION_EUR;



ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_NORMA MODIFY (REVENUE_IN_MILLION_EUR DECIMAL(10, 2));



ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_OTTO MODIFY (REVENUE_IN_MILLION_EUR DECIMAL(10, 2));




ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_ZALANDO MODIFY (REVENUE_IN_MILLION_EUR DECIMAL(10, 2));


--ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT  DROP COLUMN COMPANY_K;
ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_AMAZON_GERMANY ADD COLUMN IF NOT EXISTS COMPANY VARCHAR(255) DEFAULT 'Amazon';
ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_CA ADD COLUMN IF NOT EXISTS COMPANY VARCHAR(255) DEFAULT 'C&A';
ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_EDEKA ADD COLUMN IF NOT EXISTS COMPANY VARCHAR(255) DEFAULT 'Edeka';
ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT ADD COLUMN IF NOT EXISTS COMPANY_G VARCHAR(255) DEFAULT 'Galeria Kaufhof';
ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT ADD COLUMN IF NOT EXISTS COMPANY_K VARCHAR(255) DEFAULT 'Karstadt';
ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_NORMA ADD COLUMN IF NOT EXISTS COMPANY VARCHAR(255) DEFAULT 'Norma';
ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_OTTO ADD COLUMN IF NOT EXISTS COMPANY VARCHAR(255) DEFAULT 'Otto';
ALTER TABLE DATA_WAREHOUSE.STAGING_REVENUE_ZALANDO ADD COLUMN IF NOT EXISTS COMPANY VARCHAR(255) DEFAULT 'Zalando';


--
--DATA MERGING
--

--no action needs to be done upon match 

--Table COMPANY

MERGE INTO DATA_WAREHOUSE.COMPANY CP
USING (SELECT DISTINCT COMPANY FROM DATA_WAREHOUSE.STAGING_REVENUE_AMAZON_GERMANY) AS SR
ON CP.COMPANY = SR.COMPANY
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY);

MERGE INTO DATA_WAREHOUSE.COMPANY CP
USING (SELECT DISTINCT COMPANY FROM DATA_WAREHOUSE.STAGING_REVENUE_CA) AS SR
ON CP.COMPANY = SR.COMPANY
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY);

MERGE INTO DATA_WAREHOUSE.COMPANY CP
USING (SELECT DISTINCT COMPANY FROM DATA_WAREHOUSE.STAGING_REVENUE_EDEKA) AS SR
ON CP.COMPANY = SR.COMPANY
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY);

MERGE INTO DATA_WAREHOUSE.COMPANY CP
USING (SELECT DISTINCT COMPANY_G FROM DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT) AS SR
ON CP.COMPANY = SR.COMPANY_G
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY_G);

MERGE INTO DATA_WAREHOUSE.COMPANY CP
USING (SELECT DISTINCT COMPANY_K FROM DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT) AS SR
ON CP.COMPANY = SR.COMPANY_K
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY_K);

MERGE INTO DATA_WAREHOUSE.COMPANY CP
USING (SELECT DISTINCT COMPANY FROM DATA_WAREHOUSE.STAGING_REVENUE_NORMA) AS SR
ON CP.COMPANY = SR.COMPANY
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY);

MERGE INTO DATA_WAREHOUSE.COMPANY CP
USING (SELECT DISTINCT COMPANY FROM DATA_WAREHOUSE.STAGING_REVENUE_OTTO) AS SR
ON CP.COMPANY = SR.COMPANY
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY);

MERGE INTO DATA_WAREHOUSE.COMPANY CP
USING (SELECT DISTINCT COMPANY FROM DATA_WAREHOUSE.STAGING_REVENUE_ZALANDO) AS SR
ON CP.COMPANY = SR.COMPANY
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY);



--Table REVENUE

MERGE INTO DATA_WAREHOUSE.REVENUE RV
USING DATA_WAREHOUSE.STAGING_REVENUE_AMAZON_GERMANY AS SR 
ON RV.REVENUE_YEAR = SR.REVENUE_YEAR AND RV.COMPANY = SR.COMPANY
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY, SR.REVENUE_YEAR, SR.REVENUE_IN_MILLION_EUR);

MERGE INTO DATA_WAREHOUSE.REVENUE RV
USING DATA_WAREHOUSE.STAGING_REVENUE_CA AS SR 
ON RV.REVENUE_YEAR = SR.REVENUE_YEAR AND RV.COMPANY = SR.COMPANY
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY, SR.REVENUE_YEAR, SR.REVENUE_IN_MILLION_EUR);

MERGE INTO DATA_WAREHOUSE.REVENUE RV
USING DATA_WAREHOUSE.STAGING_REVENUE_EDEKA AS SR 
ON RV.REVENUE_YEAR = SR.REVENUE_YEAR AND RV.COMPANY = SR.COMPANY
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY, SR.REVENUE_YEAR, SR.REVENUE_IN_MILLION_EUR);

MERGE INTO DATA_WAREHOUSE.REVENUE RV
USING DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT AS SR 
ON RV.REVENUE_YEAR = SR.REVENUE_YEAR AND RV.COMPANY = SR.COMPANY_G
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY_G, SR.REVENUE_YEAR, SR.REVENUE_GALERIAKAUFHOF_IN_MILLION_EUR);

MERGE INTO DATA_WAREHOUSE.REVENUE RV
USING DATA_WAREHOUSE.STAGING_REVENUE_GALERIAKAUFHOF_AND_KARSTADT AS SR 
ON RV.REVENUE_YEAR = SR.REVENUE_YEAR AND RV.COMPANY = SR.COMPANY_K
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY_K, SR.REVENUE_YEAR, SR.REVENUE_KARSTADT_IN_MILLION_EUR);

MERGE INTO DATA_WAREHOUSE.REVENUE RV
USING DATA_WAREHOUSE.STAGING_REVENUE_OTTO AS SR 
ON RV.REVENUE_YEAR = SR.REVENUE_YEAR AND RV.COMPANY = SR.COMPANY
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY, SR.REVENUE_YEAR, SR.REVENUE_IN_MILLION_EUR);

MERGE INTO DATA_WAREHOUSE.REVENUE RV
USING DATA_WAREHOUSE.STAGING_REVENUE_NORMA AS SR 
ON RV.REVENUE_YEAR = SR.REVENUE_YEAR AND RV.COMPANY = SR.COMPANY
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY, SR.REVENUE_YEAR, SR.REVENUE_IN_MILLION_EUR);

MERGE INTO DATA_WAREHOUSE.REVENUE RV
USING DATA_WAREHOUSE.STAGING_REVENUE_ZALANDO AS SR 
ON RV.REVENUE_YEAR = SR.REVENUE_YEAR AND RV.COMPANY = SR.COMPANY
WHEN NOT MATCHED THEN INSERT VALUES (SR.COMPANY, SR.REVENUE_YEAR, SR.REVENUE_IN_MILLION_EUR);



--Table ONLINE_PRODUCT_TYPE

MERGE INTO DATA_WAREHOUSE.ONLINE_PRODUCT_TYPE OP
USING (SELECT DISTINCT ONLINE_PRODUCT_TYPE FROM DATA_WAREHOUSE.STAGING_ONLINESHOPPING) AS SO
ON OP.ONLINE_PRODUCT_TYPE = SO.ONLINE_PRODUCT_TYPE
WHEN NOT MATCHED THEN INSERT VALUES (SO.ONLINE_PRODUCT_TYPE);



--Table OTP_PURCHASE_RATE

MERGE INTO DATA_WAREHOUSE.OPT_PURCHASE_RATE OP
USING DATA_WAREHOUSE.STAGING_ONLINESHOPPING AS SO
ON SO.PURCHASE_YEAR_Q1 = OP.PURCHASE_YEAR_Q1 AND SO.ONLINE_PRODUCT_TYPE = OP.ONLINE_PRODUCT_TYPE
WHEN NOT MATCHED THEN INSERT VALUES (SO.PURCHASE_YEAR_Q1, SO.ONLINE_PRODUCT_TYPE, SO.PURCHASE_RATE);



--Table INDUSTRY

MERGE INTO DATA_WAREHOUSE.INDUSTRY ID
USING (SELECT DISTINCT INDUSTRY FROM DATA_WAREHOUSE.STAGING_BUSINESS_INDICATORS) AS SO
ON ID.INDUSTRY = SO.INDUSTRY
WHEN NOT MATCHED THEN INSERT VALUES (SO.INDUSTRY);



--Table BUSINESS_INDICATORS

MERGE INTO DATA_WAREHOUSE.BUSINESS_INDICATORS BI
USING DATA_WAREHOUSE.STAGING_BUSINESS_INDICATORS AS SO
ON BI.STATISTICAL_YEAR = SO.STATISTICAL_YEAR AND BI.INDUSTRY = SO.INDUSTRY
WHEN NOT MATCHED THEN INSERT VALUES (SO.STATISTICAL_YEAR, SO.INDUSTRY, SO.TOTAL_REVENUE_IN_MILLION_EUR, 
SO.REVENUE_SHARE_ECOMMERCE, SO.TOTAL_EMPLOYEES, SO.TOTAL_COMPANIES, SO.SUBSIDIES_BY_GERMANY_IN_MILLION_EUR);



--
--DATA ANALYSIS
--

--Calculates the growth in revenue in percentage for each company per year.

--Formula for growth: (current year's revenue - past year's revenue ) / past year's revenue * 100
SELECT R.REVENUE_YEAR,  R.COMPANY, R.REVENUE_IN_MILLION_EUR,
(R.REVENUE_IN_MILLION_EUR - LAG(R.REVENUE_IN_MILLION_EUR) OVER (PARTITION BY R.COMPANY ORDER BY R.REVENUE_YEAR ASC)) 
/ LAG(R.REVENUE_IN_MILLION_EUR) OVER (PARTITION BY R.COMPANY ORDER BY R.REVENUE_YEAR ASC) * 100 AS REVENUE_PERCENTAGE_GROWTH
FROM DATA_WAREHOUSE.REVENUE R;




--Calculates the average growth in revenue of a company in percentage, then ranks each companies average, from best to worst growth.

--Uses Query 1

SELECT R3.COMPANY, R3.AVERAGE_PERCENTAGE_REVENUE_GROWTH, DENSE_RANK() OVER (ORDER BY AVERAGE_PERCENTAGE_REVENUE_GROWTH DESC) AS GROWTH_RANK
FROM (SELECT R2.COMPANY, ROUND(AVG(R2.REVENUE_PERCENTAGE_GROWTH), 2) AS AVERAGE_PERCENTAGE_REVENUE_GROWTH
	  FROM (SELECT R.REVENUE_YEAR,  R.COMPANY, R.REVENUE_IN_MILLION_EUR,
		    (R.REVENUE_IN_MILLION_EUR - LAG(R.REVENUE_IN_MILLION_EUR) OVER (PARTITION BY R.COMPANY ORDER BY R.REVENUE_YEAR ASC)) 
            / LAG(R.REVENUE_IN_MILLION_EUR) OVER (PARTITION BY R.COMPANY ORDER BY R.REVENUE_YEAR ASC) * 100 AS REVENUE_PERCENTAGE_GROWTH
			FROM DATA_WAREHOUSE.REVENUE R) R2
GROUP BY R2.COMPANY) R3
ORDER BY GROWTH_RANK ASC;



--Calculates the average revenue and average employees per company of one industry per year.

SELECT BI1.STATISTICAL_YEAR, BI1.INDUSTRY, ROUND((BI1.TOTAL_REVENUE_IN_MILLION_EUR / BI2.TOTAL_COMPANIES), 2) AS AVERAGE_REVENUE_PER_COMPANY,
ROUND((BI1.TOTAL_EMPLOYEES / BI2.TOTAL_COMPANIES), 2) AS AVERAGE_EMPLOYEES_PER_COMPANY,
BI1.REVENUE_SHARE_ECOMMERCE 
FROM DATA_WAREHOUSE.BUSINESS_INDICATORS BI1
JOIN DATA_WAREHOUSE.BUSINESS_INDICATORS BI2 ON BI1.INDUSTRY = BI2.INDUSTRY AND BI1.STATISTICAL_YEAR = BI2.STATISTICAL_YEAR 



--Selects the industries with the highest average revenue per company 
--while having the lowest average amount of employees in a year via skyline
--(= Average revenue per employee).

--Uses Query 3

SELECT A1.* 
FROM (SELECT BI1.STATISTICAL_YEAR, BI1.INDUSTRY, ROUND((BI1.TOTAL_REVENUE_IN_MILLION_EUR / BI2.TOTAL_COMPANIES), 2) AS AVERAGE_REVENUE_PER_COMPANY,
	  ROUND((BI1.TOTAL_EMPLOYEES / BI2.TOTAL_COMPANIES), 2) AS AVERAGE_EMPLOYEES_PER_COMPANY,
	  BI1.REVENUE_SHARE_ECOMMERCE 
	  FROM DATA_WAREHOUSE.BUSINESS_INDICATORS BI1
	  JOIN DATA_WAREHOUSE.BUSINESS_INDICATORS BI2 ON BI1.INDUSTRY = BI2.INDUSTRY AND BI1.STATISTICAL_YEAR = BI2.STATISTICAL_YEAR ) A1
PREFERRING HIGH A1.AVERAGE_REVENUE_PER_COMPANY PLUS LOW A1.AVERAGE_EMPLOYEES_PER_COMPANY PARTITION BY A1.STATISTICAL_YEAR



--Calculates the median of the ecommerce revenue share of the set of worst and best ranked industries according to skyline respectively. 
--Also provides the populated standard deviation for the skyline sets.
--Median is more appropriate than average for analysis for a more expressive result (sets provided by skyline vary in rows)

--Uses Query 4

WITH BP AS (SELECT 'Companies with highest average revenue per employee (= best performing)' AS DESCRIPTION, 
            MEDIAN(A2.REVENUE_SHARE_ECOMMERCE) AS MEDIAN_REVENUE_SHARE_ECOMMERCE,
            STDDEV_POP(A2.REVENUE_SHARE_ECOMMERCE) AS STANDARD_DEVIATION_REVENUE_SHARE_ECOMMERNCE
			FROM (SELECT A1.* 
	  			  FROM (SELECT BI1.STATISTICAL_YEAR, BI1.INDUSTRY, ROUND((BI1.TOTAL_REVENUE_IN_MILLION_EUR / BI2.TOTAL_COMPANIES), 2) AS AVERAGE_REVENUE_PER_COMPANY,
	  	    	        ROUND((BI1.TOTAL_EMPLOYEES / BI2.TOTAL_COMPANIES), 2) AS AVERAGE_EMPLOYEES_PER_COMPANY,
	        	        BI1.REVENUE_SHARE_ECOMMERCE 
	        	        FROM DATA_WAREHOUSE.BUSINESS_INDICATORS BI1
	        	        JOIN DATA_WAREHOUSE.BUSINESS_INDICATORS BI2 ON BI1.INDUSTRY = BI2.INDUSTRY AND BI1.STATISTICAL_YEAR = BI2.STATISTICAL_YEAR ) A1
	  	    PREFERRING HIGH A1.AVERAGE_REVENUE_PER_COMPANY PLUS LOW A1.AVERAGE_EMPLOYEES_PER_COMPANY PARTITION BY A1.STATISTICAL_YEAR) A2),
	 WP AS (SELECT 'Companies with lowest average revenue per employees (= worst performing)' AS DESCRIPTION, 
	        MEDIAN(A2.REVENUE_SHARE_ECOMMERCE) AS MEDIAN_REVENUE_SHARE_ECOMMERCE,
	        STDDEV_POP(A2.REVENUE_SHARE_ECOMMERCE) AS STANDARD_DEVIATION_REVENUE_SHARE_ECOMMERNCE
		    FROM (SELECT A1.* 
	  	   	      FROM (SELECT BI1.STATISTICAL_YEAR, BI1.INDUSTRY, ROUND((BI1.TOTAL_REVENUE_IN_MILLION_EUR / BI2.TOTAL_COMPANIES), 2) AS AVERAGE_REVENUE_PER_COMPANY,
	  	    	        ROUND((BI1.TOTAL_EMPLOYEES / BI2.TOTAL_COMPANIES), 2) AS AVERAGE_EMPLOYEES_PER_COMPANY,
	                    BI1.REVENUE_SHARE_ECOMMERCE 
	        	        FROM DATA_WAREHOUSE.BUSINESS_INDICATORS BI1
	        	        JOIN DATA_WAREHOUSE.BUSINESS_INDICATORS BI2 ON BI1.INDUSTRY = BI2.INDUSTRY AND BI1.STATISTICAL_YEAR = BI2.STATISTICAL_YEAR ) A1
	  	    PREFERRING LOW A1.AVERAGE_REVENUE_PER_COMPANY PLUS HIGH A1.AVERAGE_EMPLOYEES_PER_COMPANY PARTITION BY A1.STATISTICAL_YEAR) A2)
SELECT BP.DESCRIPTION, BP.MEDIAN_REVENUE_SHARE_ECOMMERCE, BP.STANDARD_DEVIATION_REVENUE_SHARE_ECOMMERNCE FROM BP
UNION ALL
SELECT WP.DESCRIPTION, WP.MEDIAN_REVENUE_SHARE_ECOMMERCE, WP.STANDARD_DEVIATION_REVENUE_SHARE_ECOMMERNCE FROM WP;



--Calculates the total revenue each company has acquired within their provided data to illustrate their economical sizes. 

SELECT R.REVENUE_YEAR, R.COMPANY, SUM(R.REVENUE_IN_MILLION_EUR) AS REVENUE_IN_MILLION_EUR 
FROM DATA_WAREHOUSE.REVENUE R
GROUP BY GROUPING SETS ( (R.REVENUE_YEAR, R.COMPANY), (R.COMPANY))
ORDER BY R.COMPANY, R.REVENUE_YEAR ASC; 


--Filters specific online shopping purchase interactions to illustrate development of customer statistics over time.

SELECT OP.ONLINE_PRODUCT_TYPE, OP.PURCHASE_YEAR_Q1, OP.PURCHASE_RATE 
FROM DATA_WAREHOUSE.OPT_PURCHASE_RATE OP
WHERE OP.ONLINE_PRODUCT_TYPE = 'Kauf von Waren/Dienstleistungen im Internet' OR 
OP.ONLINE_PRODUCT_TYPE = 'Kauf innerhalb der letzten 3 Monate' OR 
OP.ONLINE_PRODUCT_TYPE = 'Kleidung, Sportartikel' OR 
OP.ONLINE_PRODUCT_TYPE = 'Lebensmittel'
ORDER BY OP.ONLINE_PRODUCT_TYPE, OP.PURCHASE_YEAR_Q1;
